import requests
import time
import threading
import signal
import sys
import os
from datetime import datetime, timedelta
from collections import Counter, defaultdict
from calendar import monthrange
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_URL = "https://belarusborder.by/info/monitoring-new?token=test&checkpointId=53d94097-2b34-11ec-8467-ac1f6bf889c0"
BOT_TOKEN = "8022336559:AAGY2jsvuPl0iXlNIbhbzKOnFOFdd4_g5BE"
CHECK_INTERVAL = 30
STAT_FILE = "statistic.txt"

monitored_cars = {}
last_seen = set()
passed_counter = Counter()
date_selection = {}
current_hour = None
current_queue_count = None  # None - –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, 0+ - –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
running = True

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–ï–†–´–í–ê–ù–ò–ô ==================
def signal_handler(sig, frame):
    global running
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    running = False
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# ================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==================
def log(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

# ================== –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ==================
def get_queue_data():
    try:
        response = requests.get(
            API_URL,
            headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
                "Accept": "application/json"
            },
            timeout=20
        )
        
        if response.status_code != 200:
            log(f"[API ERROR] HTTP {response.status_code}: {response.text[:200]}")
            return None
        
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        if 'carLiveQueue' not in data or not isinstance(data['carLiveQueue'], list):
            log("[API WARN] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç carLiveQueue")
            return None
            
        return data['carLiveQueue']
        
    except requests.exceptions.RequestException as e:
        log(f"[API ERROR] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        return None
    except Exception as e:
        log(f"[API ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

def process_passed_cars(current_seen):
    global last_seen
    disappeared = last_seen - current_seen
    if disappeared:
        hour_key = datetime.now().strftime("%Y-%m-%d %H")
        passed_counter[hour_key] += len(disappeared)
    last_seen = current_seen

def save_statistics():
    global current_hour
    now = datetime.now()
    new_hour = now.strftime("%Y-%m-%d %H")
    
    if new_hour != current_hour and current_hour is not None:
        hour_start = datetime.strptime(current_hour, "%Y-%m-%d %H")
        next_hour = hour_start + timedelta(hours=1)
        line = f"{hour_start.strftime('%d.%m.%Y')} {hour_start.strftime('%H')}-{next_hour.strftime('%H')} {passed_counter[current_hour]}\n"
        try:
            with open(STAT_FILE, "a", encoding="utf-8") as f:
                f.write(line)
            log(f"[STAT] {line.strip()}")
        except Exception as e:
            log(f"[STAT ERROR] {str(e)}")
        
        passed_counter[current_hour] = 0
        current_hour = new_hour

def monitor_loop():
    global current_hour, running, last_seen, current_queue_count
    current_hour = datetime.now().strftime("%Y-%m-%d %H")
    
    while running:
        try:
            queue = get_queue_data()
            if queue is not None:
                current_queue_count = len(queue)
                log(f"[QUEUE] –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_queue_count} –∞–≤—Ç–æ")
                current_seen = {item.get("regnum", "").upper() for item in queue}
            else:
                current_queue_count = None
                current_seen = set()
                log("[QUEUE] –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ
            disappeared = last_seen - current_seen
            for regnum in disappeared:
                if regnum in monitored_cars and monitored_cars[regnum].get('last_position') == 1:
                    send_telegram_message(
                        monitored_cars[regnum]['chat_id'], 
                        f"‚úÖ {regnum} –ø—Ä–æ–µ—Ö–∞–ª –ö–ü–ü (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: 1)."
                    )
                    del monitored_cars[regnum]
                    log(f"[AUTO-REMOVE] {regnum} —É–¥–∞–ª–µ–Ω")
            
            process_passed_cars(current_seen)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            for regnum, info in list(monitored_cars.items()):
                match = next((item for item in (queue or []) if item.get("regnum", "").upper() == regnum.upper()), None)
                if match and (position := match.get("order_id")) is not None:
                    monitored_cars[regnum]['last_position'] = position
                    if position <= info['threshold'] and info.get('last_reported_pos') != position:
                        send_telegram_message(info['chat_id'], f"‚ÑπÔ∏è {regnum}: –ø–æ–∑–∏—Ü–∏—è {position}.")
                        info['last_reported_pos'] = position
                        if position == 1:
                            send_telegram_message(info['chat_id'], f"üîî {regnum} –≤ –ø–æ–∑–∏—Ü–∏–∏ 1!")
            
            save_statistics()
            time.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            log(f"[MONITOR ERROR] {str(e)}")
            time.sleep(10)

# ================== –§–£–ù–ö–¶–ò–ò –ö–ê–õ–ï–ù–î–ê–†–Ø ==================
def generate_calendar(year, month):
    keyboard = []
    month_name = datetime(year, month, 1).strftime('%B %Y')
    keyboard.append([InlineKeyboardButton(month_name, callback_data='ignore')])
    keyboard.append([InlineKeyboardButton(day, callback_data='ignore') for day in ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']])
    
    _, days_in_month = monthrange(year, month)
    days = [InlineKeyboardButton(str(d), callback_data=f'day_{year}_{month}_{d}') for d in range(1, days_in_month + 1)]
    for i in range(0, len(days), 7):
        keyboard.append(days[i:i+7])
    
    prev_year, prev_month = (year, month-1) if month > 1 else (year-1, 12)
    next_year, next_month = (year, month+1) if month < 12 else (year+1, 1)
    keyboard.append([
        InlineKeyboardButton("‚Üê", callback_data=f'nav_{prev_year}_{prev_month}'),
        InlineKeyboardButton("‚Üí", callback_data=f'nav_{next_year}_{next_month}')
    ])
    return InlineKeyboardMarkup(keyboard)

def handle_calendar_callback(chat_id, data):
    try:
        if data.startswith('nav'):
            _, year, month = data.split('_')
            return generate_calendar(int(year), int(month))
        
        elif data.startswith('day'):
            _, year, month, day = data.split('_')
            selected_date = datetime(int(year), int(month), int(day)).strftime('%d.%m.%Y')
            user_data = date_selection.get(chat_id, {"type": "start"})
            
            if user_data["type"] == "start":
                user_data.update({"start": selected_date, "type": "end"})
                date_selection[chat_id] = user_data
                return ("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:", generate_calendar(int(year), int(month)))
            else:
                user_data["end"] = selected_date
                date_selection.pop(chat_id, None)
                process_stat_period(chat_id, user_data["start"], selected_date)
        
        return None
    except Exception as e:
        log(f"[CALENDAR ERROR] {e}")
        return None

# ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
def send_telegram_message(chat_id, text, reply_markup=None):
    try:
        payload = {
            "chat_id": chat_id,
            "text": text
        }
        if reply_markup is not None:
            payload["reply_markup"] = reply_markup.to_json()
        response = requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json=payload,
            timeout=15
        )
        if response.status_code != 200:
            log(f"[SEND ERROR] HTTP {response.status_code}: {response.text}")
    except Exception as e:
        log(f"[SEND ERROR] {str(e)}")

def send_main_menu(chat_id):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [{"text": "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ"}, {"text": "–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ"}],
            [{"text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}, {"text": "–í—Å–µ–≥–æ –∞–≤—Ç–æ"}]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    send_telegram_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def send_calendar(chat_id):
    send_telegram_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
        generate_calendar(datetime.now().year, datetime.now().month)
    )

def process_stat_period(chat_id, start_date, end_date):
    try:
        start = datetime.strptime(start_date, "%d.%m.%Y")
        end = datetime.strptime(end_date, "%d.%m.%Y") + timedelta(days=1)
        
        stats = defaultdict(list)
        if os.path.exists(STAT_FILE):
            with open(STAT_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split()
                    if len(parts) < 3: continue
                    date_str, hour_range, count = parts[0], parts[1], parts[2]
                    try:
                        line_date = datetime.strptime(date_str, "%d.%m.%Y")
                        if start <= line_date < end:
                            stats[date_str].append(f"{hour_range} - {count} –º–∞—à–∏–Ω")
                    except:
                        continue
        
        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        for date in sorted(stats):
            response += f"\n{date}:\n" + "\n".join(stats[date]) + "\n"
        
        max_length = 4096
        if len(response) > max_length:
            for i in range(0, len(response), max_length):
                send_telegram_message(chat_id, response[i:i+max_length])
                time.sleep(1)
        else:
            send_telegram_message(chat_id, response)
    
    except Exception as e:
        log(f"[STAT ERROR] {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==================
def process_update(update):
    if "callback_query" in update:
        query = update["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        data = query["data"]
        result = handle_calendar_callback(chat_id, data)
        
        if isinstance(result, tuple):
            send_telegram_message(chat_id, result[0], result[1])
        elif result:
            send_telegram_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", result)
        return
    
    message = update.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "").strip().lower()
    
    if not text:
        return
    
    log(f"[MSG] {chat_id}: {text}")
    
    if text == "/start":
        if chat_id in date_selection:
            del date_selection[chat_id]
        send_main_menu(chat_id)
    elif text == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        date_selection[chat_id] = {"type": "start"}
        send_calendar(chat_id)
    elif text == "–≤—Å–µ–≥–æ –∞–≤—Ç–æ":
        if current_queue_count is not None:
            msg = (
                f"üöô –ê–≤—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {current_queue_count}\n"
                f"‚åö –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
        else:
            msg = "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API."
        send_telegram_message(chat_id, msg)
    elif text == "–¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ":
        send_telegram_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∏ –ø–æ—Ä–æ–≥ (–ø—Ä–∏–º–µ—Ä: ABC123 10)")
    elif text == "—É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ":
        send_telegram_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ STOP –∏ –Ω–æ–º–µ—Ä (–ø—Ä–∏–º–µ—Ä: STOP ABC123)")
    elif text.startswith("stop"):
        parts = text.split()
        if len(parts) == 2:
            regnum = parts[1].upper()
            if regnum in monitored_cars:
                del monitored_cars[regnum]
                send_telegram_message(chat_id, f"üõë {regnum} —É–¥–∞–ª–µ–Ω")
            else:
                send_telegram_message(chat_id, "‚ùå –ê–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    elif len(text.split()) == 2:
        regnum, threshold = text.split()
        if threshold.isdigit():
            monitored_cars[regnum.upper()] = {
                "chat_id": chat_id,
                "threshold": int(threshold),
                "last_position": None,
                "last_reported_pos": None
            }
            send_telegram_message(chat_id, f"üü¢ {regnum} –¥–æ–±–∞–≤–ª–µ–Ω (–ø–æ—Ä–æ–≥: {threshold})")
        else:
            send_telegram_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

def process_updates():
    last_update_id = 0
    log("[BOT] –ó–∞–ø—É—â–µ–Ω...")
    while running:
        try:
            response = requests.get(
                f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates",
                params={"offset": last_update_id + 1, "timeout": 20},
                timeout=25
            )
            
            if response.status_code != 200:
                log(f"[API ERROR] HTTP {response.status_code}")
                time.sleep(5)
                continue
                
            updates = response.json().get("result", [])
            if not updates:
                continue
                
            for update in updates:
                last_update_id = update["update_id"]
                process_update(update)
                
        except requests.exceptions.Timeout:
            continue
        except Exception as e:
            log(f"[UPDATE ERROR] {str(e)}")
            time.sleep(5)

if __name__ == "__main__":
    try:
        monitor_thread = threading.Thread(target=monitor_loop)
        monitor_thread.daemon = True
        monitor_thread.start()
        process_updates()
    except KeyboardInterrupt:
        signal_handler(None, None)